#ifndef _ZEMU_IO_H
#define _ZEMU_IO_H

#include "emulation/CPU/Z80.h"

#ifndef ZEMU_IO_SERIAL_BUFFER_SIZE
#define ZEMU_IO_SERIAL_BUFFER_SIZE 256
#endif

typedef struct {
    zuint8 buffer[ZEMU_IO_SERIAL_BUFFER_SIZE];
    unsigned int head;
    unsigned int tail;
} SerialBuffer;

/* Type of a function writing to a memory address. */
typedef void mem_write_handler_t(zuint32, zuint8);

/* Type of a function reading from a memory address. */
typedef zuint8 mem_read_handler_t(zuint32);

/* Type of a function writing to an IO port. */
typedef void io_write_handler_t(zuint8, zuint8);

/* Type of a function reading from an IO port. */
typedef zuint8 io_read_handler_t(zuint8);

/* Type of a function to handle a clock cycle for a peripheral. */
typedef zuint8 io_clock_handler_t(zusize);

void zemu_set_mem_write_handler(mem_write_handler_t * h);
void zemu_set_mem_read_handler(mem_read_handler_t * h);

void zemu_set_io_write_handler(io_write_handler_t * h);
void zemu_set_io_read_handler(io_read_handler_t * h);
void zemu_set_io_clock_handler(io_clock_handler_t * h);

zuint8 zemu_memory_read(void * context, zuint16 address);
void zemu_memory_write(void * context, zuint16 address, zuint8 value);

zuint8 zemu_memory_peek(zuint16 address);
void zemu_memory_poke(zuint16 address, zuint8 value);

void zemu_io_serial_master_puts(zuint8 val);
zuint8 zemu_io_serial_master_gets(void);
zusize zemu_io_serial_buffer_size(void);

zuint8 zemu_io_in(void * context, zuint16 port);
void zemu_io_out(void * context, zuint16 port, zuint8 value);
void zemu_io_nmi(Z80 * instance);
void zemu_io_clock(Z80 * instance, zusize cycles);

#endif
