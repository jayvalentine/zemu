#include "memory.h"

<% memory.each do |mem| %>
/* Initialization memory block "<%= mem.name %>" */
<%= mem.readonly? ? "const " : "" %>zuint8 zemu_memory_block_<%= mem.name %>[0x<%= mem.size.to_s(16) %>] =
{<% mem.contents.each_with_index do |b, i| %><%= (i % 16 == 0) ? "\n    " : "" %><%= ("0x%02x, " % b) %><% end %>
};
<% end %>

zuint8 zemu_memory_read(void * context, zuint16 address)
{
<% memory.each do |mem| %>
    if (address >= 0x<%= mem.address.to_s(16) %> && address < 0x<%= (mem.address + mem.size).to_s(16) %>)
    {
        return zemu_memory_block_<%= mem.name %>[address - 0x<%= mem.address.to_s(16) %>];
    }
<% end %>
    /* Unmapped memory has a value of 0. */
    return 0;
}

void zemu_memory_write(void * context, zuint16 address, zuint8 value)
{
<% memory.each do |mem| %>
    <% next if mem.readonly? %>
    if (address >= 0x<%= mem.address.to_s(16) %> && address < 0x<%= (mem.address + mem.size).to_s(16) %>)
    {
        zemu_memory_block_<%= mem.name %>[address - 0x<%= mem.address.to_s(16) %>] = value;
    }
<% end %>
}

zuint8 zemu_memory_peek(zuint16 address)
{
<% memory.each do |mem| %>
    if (address >= 0x<%= mem.address.to_s(16) %> && address < 0x<%= (mem.address + mem.size).to_s(16) %>)
    {
        return zemu_memory_block_<%= mem.name %>[address - 0x<%= mem.address.to_s(16) %>];
    }
<% end %>
    /* Unmapped memory has a value of 0. */
    return 0;
}
