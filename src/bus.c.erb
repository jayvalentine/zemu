#include "bus.h"

mem_write_handler_t * mem_write_handler;
mem_read_handler_t * mem_read_handler;

io_write_handler_t * io_write_handler;
io_read_handler_t * io_read_handler;
io_clock_handler_t * io_clock_handler;

void zemu_set_mem_write_handler(mem_write_handler_t * h)
{
    mem_write_handler = h;
}

void zemu_set_mem_read_handler(mem_read_handler_t * h)
{
    mem_read_handler = h;
}

void zemu_set_io_write_handler(io_write_handler_t * h)
{
    io_write_handler = h;
}

void zemu_set_io_read_handler(io_read_handler_t * h)
{
    io_read_handler = h;
}

void zemu_set_io_clock_handler(io_clock_handler_t * h)
{
    io_clock_handler = h;
}

zuint8 zemu_memory_read(void * context, zuint16 address)
{
    return zemu_memory_peek(address);
}

void zemu_memory_write(void * context, zuint16 address, zuint8 value)
{
    zemu_memory_poke(address, value);
}

zuint8 zemu_memory_peek(zuint16 address)
{
    zuint32 address_32 = address;
    return mem_read_handler(address_32);
}

void zemu_memory_poke(zuint16 address, zuint8 value)
{
    zuint32 address_32 = address;
    mem_write_handler(address_32, value);
}

void zemu_io_nmi(Z80 * instance)
{
    z80_nmi(instance);
}

void zemu_io_int_on(Z80 * instance)
{
    z80_int(instance, TRUE);
}

void zemu_io_int_off(Z80 * instance)
{
    z80_int(instance, FALSE);
}

zuint8 zemu_io_in(void * context, zuint16 port)
{
    /* Z80 IO ports occupy the lower half of the address bus.
     * We cannot assume that the top half is valid.
     */
    port &= 0x00FF;

    return io_read_handler((zuint8)port);
}

void zemu_io_out(void * context, zuint16 port, zuint8 value)
{
    /* Z80 IO ports occupy the lower half of the address bus.
     * We cannot assume that the top half is valid.
     */
    port &= 0x00FF;

    io_write_handler((zuint8)port, value);
}

void zemu_io_clock(Z80 * instance, zusize cycles)
{
    zuint8 bus_state = io_clock_handler(cycles);

    if (bus_state & 0x01) zemu_io_nmi(instance);
    
    if (bus_state & 0x02) zemu_io_int_on(instance);
    else                  zemu_io_int_off(instance);
}
