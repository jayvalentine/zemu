# Rakefile for the Zemu gem.

# The location of this rakefile.
HERE = __dir__

# Add the ./lib directory to the load path
# so that "require zemu" always references
# the development version of the gem.
libdir = File.join(HERE, "lib")
$LOAD_PATH.unshift libdir unless $LOAD_PATH.include? libdir

require 'rake/testtask'
require 'rdoc/task'
require 'yard'

require 'erb'

require 'fileutils'

require 'zemu'

require_relative 'version'

task :test => 'test:all'

def asm(basedir, string)
    # Write the string to a temporary asm file.
    File.open(File.join(basedir, "temp.asm"), "w+") { |f| f.puts string }

    # Assemble.
    `vasmz80_oldstyle -Fbin -o #{File.join(basedir, "temp.bin")} #{File.join(basedir, "temp.asm")}`
end

namespace :test do
    desc "Run config tests"
    Rake::TestTask.new :config do |t|
        t.test_files = FileList['test/config/test_*.rb']
    end

    desc "Run emulator tests"
    Rake::TestTask.new :emulator do |t|
        t.test_files = FileList['test/emulator/test_*.rb']
    end

    desc "Run build tests"
    Rake::TestTask.new :build do |t|
        t.test_files = FileList['test/build/test_*.rb']
    end

    desc "Run debug tests"
    Rake::TestTask.new :debug do |t|
        t.test_files = FileList['test/debug/test_*.rb']
    end

    desc "Profile emulator performance."
    task :profile do
        # Assemble the test program.
        asm "bin", <<-eos
    org     $0000
start:
    jp      main
    
    org     $0100
main:
    ld      HL, hello
    ld      B, 13

main_loop:
    ld      A, (HL)
    out     (0), A

    inc     HL
    djnz    main_loop

    halt

hello:
    text    "Hello, World!"
    
eos
    
        conf = Zemu::Config.new do
            name "zemu_profile"

            output_directory "bin"

            add_memory (Zemu::Config::ROM.new do
                name "rom"
                address 0x0000
                size 0x1000

                contents from_binary(File.join("bin", "temp.bin"))
            end)
        end
    
        elapsed = 0
        cycles = 0

        100.times do
            instance = Zemu.start(conf)

            start = Time.now
    
            cycles += instance.continue
        
            ending = Time.now

            instance.quit

            print "."
        
            elapsed += ending - start
        end

        print "\n"

        puts "Average cycle time: #{((elapsed / cycles) * 1_000_000_000).round(4)}us"
    end

    desc "Run all tests"
    task :all => [:config, :build, :emulator, :debug]
end

task :docs => 'docs:build'

namespace :docs do
    desc "Generate documentation"
    task :build do
        system("rm -r #{File.join(HERE, "doc")}")
        
        output = `yardoc --markup-providor redcarpet`

        unless /100.00% documented/ =~ output
            system("yard stats --list-undoc")
            puts ""
            abort("Aborting task due to missing documentation!")
        end
    end

    desc "View documentation"
    task :view => :build do
        system "firefox #{File.join(HERE, "doc", "index.html")}"
    end
end

namespace :release do
    def clean_gems
        Dir.glob("*.gem").each do |gem|
            FileUtils.rm(gem)
        end
    end

    def build_readme(major, minor, refresh)
        readme_template = ERB.new File.read(File.join(HERE, "README.md.erb"))

        changes = []
        if (major == MAJOR) && (minor == MINOR) && (refresh == REFRESH)
            changes = Dir.glob(File.join(HERE, "changelog/#{major}.#{minor}.#{refresh}/*.md"))
        else
            changes = Dir.glob(File.join(HERE, "changelog/*.md"))
        end

        version = "#{major}.#{minor}.#{refresh}"

        File.write(File.join(HERE, "README.md"), readme_template.result(binding))

        if (major == MAJOR) && (minor == MINOR) && (refresh == REFRESH)
            return
        end

        archive_path = File.join(HERE, "changelog", version)

        FileUtils.mkdir(archive_path)

        changes.each do |path|
            FileUtils.cp(path, File.join(archive_path, File.basename(path)))
            FileUtils.rm(path)
        end
    end

    desc "Update readme without changing version"
    task :readme do
        build_readme(MAJOR, MINOR, REFRESH)
    end

    desc "Release checklist"
    task :check => [:docs, :test] do
        # Check that we have release notes.
        if Dir.glob(File.join(HERE, "changelog/*.md")).size == 0
            abort("No release notes present in #{File.join(HERE, "changelog")}!")
        end
    end

    desc "Release a minor version"
    task :minor => :check do
        clean_gems

        version = File.read(File.join(HERE, "version.rb"))

        minor = 0

        # Get the current minor version.
        m = version.match(/MINOR = (\d+)/)
        if m.nil?
            abort("Could not determine minor version.")
        else
            minor = m[1].to_i
        end

        # Bump by 1.
        minor += 1

        version.gsub!(/MINOR = \d+/, "MINOR = #{minor}")

        # Reset refresh number to 0.
        version.gsub!(/REFRESH = \d+/, "REFRESH = 0")

        File.write("version.rb", version)

        # Build the readme.
        build_readme(MAJOR, minor, 0)

        # Build the gem.
        system "gem build zemu.gemspec"
    end

    desc "Release a refresh version"
    task :refresh => :check do
        clean_gems

        version = File.read(File.join(HERE, "version.rb"))

        refresh = 0

        # Get the current refresh version.
        m = version.match(/REFRESH = (\d+)/)
        if m.nil?
            abort("Could not determine refresh version.")
        else
            refresh = m[1].to_i
        end

        # Bump by 1.
        refresh += 1

        version.gsub!(/REFRESH = \d+/, "REFRESH = #{refresh}")

        File.write("version.rb", version)

        # Build the readme.
        build_readme(MAJOR, MINOR, refresh)

        # Build the gem.
        system "gem build zemu.gemspec"
    end

    desc "Release a major version"
    task :major => :check do
        clean_gems

        version = File.read(File.join(HERE, "version.rb"))

        major = 0

        # Get the current major version.
        m = version.match(/MAJOR = (\d+)/)
        if m.nil?
            abort("Could not determine major version.")
        else
            major = m[1].to_i
        end

        # Bump by 1.
        major += 1

        version.gsub!(/MAJOR = \d+/, "MAJOR = #{major}")

        # Reset minor and refresh numbers to 0.
        version.gsub!(/MINOR = \d+/, "MINOR = 0")
        version.gsub!(/REFRESH = \d+/, "REFRESH = 0")

        File.write("version.rb", version)

        # Build the readme.
        build_readme(major, 0, 0)

        # Build the gem.
        system "gem build zemu.gemspec"
    end
end
