require 'rake/testtask'
require 'rdoc/task'
require 'yard'

require 'erb'

require 'fileutils'

require_relative 'version'

# The location of this rakefile.
HERE = __dir__

task :test => 'test:all'

namespace :test do
    desc "Run config tests"
    Rake::TestTask.new :config do |t|
        t.test_files = FileList['test/config/test_*.rb']
    end

    desc "Run emulator tests"
    Rake::TestTask.new :emulator do |t|
        t.test_files = FileList['test/emulator/test_*.rb']
    end

    desc "Run build tests"
    Rake::TestTask.new :build do |t|
        t.test_files = FileList['test/build/test_*.rb']
    end

    desc "Run all tests"
    task :all => [:config, :build, :emulator]
end

task :docs => 'docs:build'

namespace :docs do
    desc "Generate documentation"
    task :build do
        system("rm -r #{File.join(HERE, "doc")}")
        
        output = `yardoc --markup-providor redcarpet`

        unless /100.00% documented/ =~ output
            system("yard stats --list-undoc")
            puts ""
            abort("Aborting task due to missing documentation!")
        end
    end

    desc "View documentation"
    task :view => :build do
        system "firefox #{File.join(HERE, "doc", "index.html")}"
    end
end

namespace :release do
    def clean_gems
        Dir.glob("*.gem").each do |gem|
            FileUtils.rm(gem)
        end
    end

    def build_readme(major, minor, refresh)
        readme_template = ERB.new File.read(File.join(HERE, "README.md.erb"))

        changes = Dir.glob(File.join(HERE, "changelog/*.md"))
        version = "#{major}.#{minor}.#{refresh}"

        File.write(File.join(HERE, "README.md"), readme_template.result(binding))

        archive_path = File.join(HERE, "changelog", version)

        FileUtils.mkdir(archive_path)

        changes.each do |path|
            FileUtils.cp(path, File.join(archive_path, File.basename(path)))
            FileUtils.rm(path)
        end
    end

    desc "Release checklist"
    task :check => [:docs, :test] do
        # Check that we have release notes.
        if Dir.glob(File.join(HERE, "changelog/*.md")).size == 0
            abort("No release notes present in #{File.join(HERE, "changelog")}!")
        end
    end

    desc "Release a minor version"
    task :minor => :check do
        clean_gems

        version = File.read(File.join(HERE, "version.rb"))

        minor = 0

        # Get the current minor version.
        m = version.match(/MINOR = (\d+)/)
        if m.nil?
            abort("Could not determine minor version.")
        else
            minor = m[1].to_i
        end

        # Bump by 1.
        minor += 1

        version.gsub!(/MINOR = \d+/, "MINOR = #{minor}")

        # Reset refresh number to 0.
        version.gsub!(/REFRESH = \d+/, "REFRESH = 0")

        File.write("version.rb", version)

        # Build the readme.
        build_readme(MAJOR, minor, 0)

        # Build the gem.
        system "gem build zemu.gemspec"
    end

    desc "Release a refresh version"
    task :refresh => :check do
        clean_gems

        version = File.read(File.join(HERE, "version.rb"))

        refresh = 0

        # Get the current refresh version.
        m = version.match(/REFRESH = (\d+)/)
        if m.nil?
            abort("Could not determine refresh version.")
        else
            refresh = m[1].to_i
        end

        # Bump by 1.
        refresh += 1

        version.gsub!(/REFRESH = \d+/, "REFRESH = #{refresh}")

        File.write("version.rb", version)

        # Build the readme.
        build_readme(MAJOR, MINOR, refresh)

        # Build the gem.
        system "gem build zemu.gemspec"
    end
end
